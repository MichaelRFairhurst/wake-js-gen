import WakeClass;
import WakeProperty;
import LinkableOutput;
import WakeType;
import WakeLambdaType;
import Map;
import Annotation;
import AnnotationVal;

every NativeJsGenerator is:

	provides Exception;

	createNative(WakeClass)WrapperTo(LinkableOutput file) {
		var Bool isJsWrapper = false;
		var Text? jsSingletonName = nothing;

		foreach(WakeClass.Annotation[]) {
			if(Annotation.name == "JavascriptWrapper") {
				isJsWrapper = true;
			} else if(Annotation.name == "JavascriptSingleton") {
				jsSingletonName = Annotation.AnnotationVal[0].Text;
			}
		}

		file.write('function ')
			.writeClassUsage(WakeClass.classname)
			.write('(');

		if(isJsWrapper) {
			file.write('a');
		}

		file.write('){');

		foreach(WakeClass.Annotation[]) {
			if(Annotation.name == "JavascriptConstruct") {
				var Text? ctor = Annotation.AnnotationVal[0].Text;
				if ctor exists {
					file.write(ctor);
				}
			}
		}

		foreach(WakeClass.properties.getKeys()) {
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				var WakeType? = WakeProperty.WakeType;

				if WakeType exists {
					var WakeLambdaType? = WakeType.WakeLambdaType;

					if WakeLambdaType exists {

						var Text nativeName = WakeProperty.casing[0];

						var Num? placement = nativeName.indexOf('(');
						if placement exists {
							nativeName = nativeName.substr(0, placement);
						}

						file.write('this.')
							.writePropertyUsage(WakeProperty.name)
							.write('=function ')
							.writePropertyUsage(WakeProperty.name)
							.write('(){');

						var Text? customJs = nothing;

						foreach(WakeProperty.Annotation[]) {
							if(Annotation.name == "CustomJavascript") {
								customJs = Annotation.AnnotationVal[0].Text;
							}
						}

						if customJs exists {
							file.write(customJs);
						} else {
							var Text subject = 'a';
							if jsSingletonName exists {
								subject = jsSingletonName;
							}

							file.write('return ' + subject + '.' + nativeName)
								.write('.apply(' + subject + ',arguments)');
						}

						file.write('};');

					} else {
						throw Exception from this;
					}
				}
			}
		}

		file.write("}");
	}
