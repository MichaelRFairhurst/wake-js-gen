import treflect.WakeClass;
import treflect.WakeProperty;
import LinkableOutput;
import treflect.WakeType;
import treflect.WakeLambdaType;
import std.Map;
import treflect.Annotation;
import treflect.AnnotationVal;
import NativeMethodGenerator;

every NativeJsGenerator is:

	needs NativeMethodGenerator;

	createNative(WakeClass)WrapperTo(LinkableOutput file) {
		var isJsWrapper = false;
		var Text? jsSingletonName = nothing;

		foreach WakeClass.Annotation[] {
			if Annotation.name == "JavascriptWrapper" {
				isJsWrapper = true;
			} else if Annotation.name == "JavascriptSingleton" {
				jsSingletonName = Annotation.AnnotationVal[0].Text;
			}
		}

		file.write('function ')
			.writeClassUsage(WakeClass.classname)
			.write('(');

		if isJsWrapper {
			file.write('a');
		}

		file.write('){');

		foreach WakeClass.Annotation[] {
			if Annotation.name == "JavascriptConstruct" {
				var ctor = Annotation.AnnotationVal[0].Text;
				if ctor exists {
					file.write(ctor);
				}
			}
		}

		foreach WakeClass.properties.getKeys() {
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				NativeMethodGenerator.generate(WakeProperty)To(file, jsSingletonName);
			}
		}

		file.write("}");
	}
