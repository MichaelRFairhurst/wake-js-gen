import treflect.WakeProperty;
import LinkableOutput;
import treflect.WakeLambdaType;
import treflect.Annotation;
import treflect.AnnotationVal;
import ExpressionSubstitutor;
import treflect.WakeType;
import treflect.WakeVarDecl;
import treflect.ClassVarRef;
import std.Map;

every NativeMethodGenerator is:

	needs ExpressionSubstitutor;

	provides Exception, Map{Text, Text};

	generate(WakeProperty)To(LinkableOutput file, Text? jsSingletonName) {
		var WakeType? = WakeProperty.WakeVarDecl.WakeType;

		if WakeType exists {
			var WakeLambdaType? = WakeType.WakeLambdaType;

			if WakeLambdaType exists {

				var Text nativeName = WakeProperty.casing[0];

				var Num? placement = nativeName.indexOf('(');
				if placement exists {
					nativeName = nativeName.substr(0, placement);
				}

				file.write('this.')
					.writePropertyUsage(WakeProperty.name)
					.write('=function ')
					.writePropertyUsage(WakeProperty.name)
					.write('(');

				var Map{Text, Text} varMap from this;
				var Char[] varNames = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

				foreach arg in WakeLambdaType.arguments at i {
					varMap.put(arg.getClassVarRef().toText(), varNames[i].toText());
				}

				file.write(','.join(varMap.getValues()) + '){');

				var Text? customJs = nothing;

				foreach WakeProperty.Annotation[] {
					if Annotation.name == "CustomJavascript" {
						customJs = Annotation.AnnotationVal[0].Text;
					}
				}

				if customJs exists {
					file.write(ExpressionSubstitutor.substitute(varMap)Within(customJs));
				} else {
					var Text subject = 'a's;
					if jsSingletonName exists {
						subject = jsSingletonName;
					}

					file.write('return ' + subject + '.' + nativeName)
						.write('.apply(' + subject + ',arguments)');
				}

				file.write('};');

			} else {
				throw Exception from this;
			}
		}
	}
