import treflect.WakeType;
import std.Map;
import io.Printer;

every ExpressionSubstitutor is:

	provides Exception;

	Text -- substitute(Map{Text, Text})Within(Text) {
		var Bool openFirstCurly = false;
		var Bool openCurly = false;
		var Bool closeFirstCurly = false;
		var Text result = '';
		var Text curlyContents = '';

		for(var Int = 0; Int < Text.getSize(); Int += 1) {
			if openFirstCurly {
				if Text.charAt(Int) == '{' {
					openCurly = true;
					openFirstCurly = false;
					curlyContents = '';
				}
			} else if openCurly {
				if Text.charAt(Int) != '}' {
					var Char? = Text.charAt(Int);
					if Char exists {
						curlyContents += Char;
					}
				} else {
					openCurly = false;
					closeFirstCurly = true;
				}
			} else if closeFirstCurly {
				closeFirstCurly = false;
				if Text.charAt(Int) != '}' {
					result += "{{" + curlyContents + "}";
				} else {
					var Bool matched = false;
					foreach $Text in Map.getKeys() {
						if $Text == curlyContents {
							var toReplaceWith Text? = Map.get($Text);
							if toReplaceWith exists {
								matched = true;
								result += toReplaceWith;
							}
						}
					}

					if !matched {
						throw Exception from this;
					}
				}
			} else {
				if Text.charAt(Int) == '{' {
					openFirstCurly = true;
				} else {
					var Char? = Text.charAt(Int);
					if Char exists {
						result += Char;
					}
				}
			}
		}

		return result;
	}
